name: 'Setup Cloudflare SSH'
description: 'Sets up SSH connection through Cloudflare tunnel'
inputs:
  ssh-password:
    description: 'SSH password for authentication'
    required: true
  server-hostname:
    description: 'Cloudflare tunnel hostname (e.g., vps-71.fds-1.com)'
    required: true
  server-user:
    description: 'SSH username'
    required: true
    default: 'ec2-user'
  host-alias:
    description: 'SSH host alias to use in commands'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Disable IPv6 and Install cloudflared
      run: |
        echo "🔧 Disabling IPv6 for cloudflared connectivity..."
        sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
        sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
        echo "📥 Installing cloudflared..."
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb
        cloudflared --version
        echo "✅ cloudflared installed with IPv6 disabled"
      shell: bash
    
    - name: Install sshpass
      run: |
        echo "📦 Installing sshpass..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        echo "✅ sshpass installed"
      shell: bash
    
    - name: Configure SSH
      run: |
        echo "⚙️  Configuring SSH for Cloudflare tunnel..."
        mkdir -p ~/.ssh
        cat >> ~/.ssh/config << 'EOF'
        Host ${{ inputs.host-alias }}
          HostName ${{ inputs.server-hostname }}
          User ${{ inputs.server-user }}
          ProxyCommand cloudflared access tcp --hostname ${{ inputs.server-hostname }} --edge-ip-version 4
          PreferredAuthentications password
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          ServerAliveInterval 30
          ServerAliveCountMax 3
          ConnectTimeout 30
          AddressFamily inet
        EOF
        echo "✅ SSH config created"
        echo ""
        echo "📋 SSH configuration:"
        cat ~/.ssh/config
      shell: bash
    
    - name: Test SSH connection
      run: |
        echo "🔍 Testing SSH connection..."
        if sshpass -p "${{ inputs.ssh-password }}" ssh ${{ inputs.host-alias }} "echo '✅ SSH connection successful'"; then
          echo "🎉 SSH tunnel is working!"
        else
          echo "❌ SSH connection failed"
          exit 1
        fi
      shell: bash

